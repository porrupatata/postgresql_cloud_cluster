---
# tasks file for context.postgresql_os

- name: Print all available facts
  debug:
      var: "ansible_facts"

- name: Print cpu count
  debug:
      msg: "Numbre of vcpus on host: {{ ansible_facts.processor_vcpus }}"

- name: Print RAM memory
  debug:
      msg: "RAM memory on host: {{ ansible_facts.memtotal_mb }} MB"

- name: Store RAM memory in var
  set_fact:
      pghost_ram_mb: "{{ ansible_facts.memtotal_mb }}"


## INSTALL DEPENDENCIES AND REQUIRED PACKAGES ###############

- name: install epel-repository
  dnf: 
     state: present
     name:
     - epel-release

- name: Install the 'Development tools' package group
  dnf:
    name: '@Development tools'
    state: present

- name: other dependencies
  dnf: 
     state: present
     name:
     - gcc
     - xfsprogs # for expansion of FS after EBS size mod



## SYSCTL SETTINGS ##########################################

- name: Set sysctl
  block:
        - name: backing up sysctl
          copy:
            src: /etc/sysctl.conf
            remote_src: yes
            dest: /tmp/sysctl.conf.bak
            backup: yes

        - name: get shmall
          shell: echo $(expr $(getconf _PHYS_PAGES) / 2)
          register: shmall

        - name: get shmmax
          shell: echo $(expr $(getconf _PHYS_PAGES) / 2 \* $(getconf PAGE_SIZE))
          register: shmmax

        - name: get min_free_kbytes
          shell: awk 'BEGIN {OFMT = "%.0f";} /MemTotal/ {print $2 * .03;}' /proc/meminfo
          register: min_free_kbytes

        - name:  configure sysctl
          sysctl:
                name: '{{ item.key }}'
                value: '{{ item.value }}'
                sysctl_set: yes
                state: present
                reload: yes
                ignoreerrors: yes
          with_dict:
                kernel.shmall: '{{ shmall.stdout }}'
                kernel.shmmax: '{{ shmmax.stdout }}'
                kernel.shmmni: 4096
                vm.min_free_kbytes: '{{ min_free_kbytes.stdout }}'
                vm.overcommit_memory: 2
                vm.overcommit_ratio: 95
                net.ipv4.ip_local_port_range: 10000 65535
                kernel.sem: 500 2048000 200 32767
                kernel.sysrq: 1
                kernel.core_uses_pid: 1
                kernel.msgmnb: 65536
                kernel.msgmax: 65536
                kernel.msgmni: 2048
                net.ipv4.tcp_syncookies: 1
                net.ipv4.conf.default.accept_source_route: 0
                net.ipv4.tcp_max_syn_backlog: 4096
                net.ipv4.conf.all.arp_filter: 1
                net.core.netdev_max_backlog: 10000
                net.core.rmem_max: 2097152
                net.core.wmem_max: 2097152
                vm.swappiness: 10
                vm.zone_reclaim_mode: 0
                vm.dirty_expire_centisecs: 500
                vm.dirty_writeback_centisecs: 100
                vm.dirty_background_ratio: 0
                vm.dirty_ratio: 0
                vm.dirty_background_bytes: 1610612736
                vm.dirty_bytes: 4294967296
                # aws timeout issue
                net.ipv4.tcp_keepalive_time: 300
                net.ipv4.tcp_keepalive_intvl: 300
                net.ipv4.tcp_keepalive_probes: 60
  tags: [ sysctl ] 

## PAM LIMITS ################################################### 

- name: State PAM limits
  pam_limits:
        domain: '*'
        limit_type: '-'
        limit_item: '{{ item.key }}'
        value: '{{ item.value }}'
  with_dict:
        nofile: 655360
        nproc: 655360
        memlock: unlimited
        core: unlimited


## USERS #######################################################

- name: create users and groups
  block:
        - name: include user_file
          include_vars: conf_files/user_details.yml
          
        - name: Create required user groups
          group:
                name: "{{ item.group_name }}"
                gid: "{{ item.gid }}"
                state: present
          loop:
               "{{ host_groups }}"


        - name: Allow 'sysadmin' group to have passwordless sudo
          lineinfile:
                dest: /etc/sudoers
                state: present
                regexp: '^%sysadmin'
                line: '%sysadmin ALL=(ALL) NOPASSWD: ALL'
                validate: 'visudo -cf %s'


        - name: Create other  users
          user:
                name: "{{ item.user }}"
                uid: "{{ item.id }}"
                group: "{{ item.group_name }}"
                groups: "{{ item.extra_gids }}"
                append: yes
                state: present 
          when: not (  item.user  == 'root' )
          loop:
                "{{ host_users }}"
        
        - name: add password to user postgres 
          user:
                name: postgres
                password:  "{{ postgres_password | password_hash('sha512','A512') }}" 
          tags: postgres_user

  tags: [ os_users ]

